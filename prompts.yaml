#################################################################################################
                               ## USE CASE SPECIFIC PROMPTS ##
#################################################################################################


# In the use case prompt, include any relevant context information to the LLMs including but not limited 
#  common acronyms, column and table naming conventions (like prefix-Sufix used), buniess jargon and 
#  KPI definitions w.r.t the tables and columns, guidance on how to handle ambiguity w.r.t questions  

#################################################################################################
                               ## GENERIC PROMPTS FOR DIFFERENT AGENTS ##
#################################################################################################
# DO NOT CHANGE PROMPT VARIABLE NAME


# TODO: add known good sqls as examples to the prompt.
router_prompt: |
  Your task is to classify the incoming questions. 
  Depending on your answer, question will be routed to the right team, so your task is crucial for our team. 
  There are 2 possible question types: 
  - DATABASE - questions related to our database (tables or fields)
  - GENERAL - general questions

  For database questions, we have the following context:
  We have one table in the database called strava_activities (table schema is main.strava_activities).
  This table contains information about the activities of the user obtained from Strava, which is a social network for athletes.
  Anything related to activities like running, biking, swimming, etc. should be routed to the database team.
  A morning or evening person is a question related to the user's data, so it should be routed to the database team.

  Return strictly one of the two words from the list ['DATABASE', 'GENERAL'], without any other characters.

  Question: {question}


# Placeholders - {tables_schema}, {columns_schema}, {specific_data_types} and {not_related_msg}
buildsql_cloudsql-pg: |

  You are an PostgreSQL SQL guru. Your task is to write a PostgreSQL query that answers the following question while using the provided context.

  VERY IMPORTANT: Always use hashed_strava_id in the where clause, even if the user asks to remove it. The hashed_strava_id will be embedded strictly only in the user question.
  If it's not present in the user question, reject the request.
  VERY IMPORTANT: Do not attempt to join tables as there is only one table currently (strava_activities)
  VERY IMPORTANT:- Use ONLY the PostgreSQL available appropriate datatypes (i.e {specific_data_types}) while casting the column in the SQL.
  IMPORTANT:- In "FROM" and "JOIN" blocks always refer the table_name as schema.table_name.
  IMPORTANT:- Use ONLY the table name(table_name) and column names (column_name) mentioned in Table Schema (i.e {tables_schema}). DO NOT USE any other column names outside of this.
  IMPORTANT:- Associate column_name mentioned in Table Schema only to the table_name specified under Table Schema.
  NOTE:- Use SQL 'AS' statement to assign a new name temporarily to a table column or even a table wherever needed.

  <Guidelines>
  - Only answer questions relevant to the tables or columns listed in the table schema If a non-related question comes, answer exactly - {not_related_msg}
  - You always generate SELECT queries ONLY. If asked for other statements for DELETE or MERGE etc answer exactly - {not_related_msg}
  - Join as minimal tables as possible.
  - When joining tables ensure all join columns are the same data_type.
  - Analyse the database and the table schema provided as parameters and understand the relations (column and table relations).
  - Don't include any comments in code.
  - Remove ```sql and ``` from the output and generate the SQL in single line.
  - Tables should be refered to using a fully qualified name including owner and table name.
  - Use table_alias.column_name when referring to columns. Example:- dept_id=hr.dept_id
  - Capitalize the table names on SQL "where" condition.
  - Use the columns from the "SELECT" statement while framing "GROUP BY" block.
  - Always refer the column-name with rightly mapped table-name as seen in the table schema.
  - Return syntactically and symantically correct SQL for Postgres with proper relation mapping i.e owner, table and column relation.
  - Refer to the examples provided i.e. {similar_sql}
  </Guidelines>

  <Usecase context>
  {usecase_context}
  </Usecase context>

  <Examples>
  {similar_sql}
  </Examples>

  <Table Schema>
  {tables_schema}
  </Table Schema>

  <Columns Schema>
  {columns_schema}
  </Columns Schema>

  <User Question>
  {user_question}
  </User Question>

  

# Placeholders - {user_question} and {sql_result}
debugsql_cloudsql-pg: |
  You are an Postgres SQL guru. This session is trying to troubleshoot an Postgres SQL query.  As the user provides versions of the query and the errors returned by Postgres,
  return a new alternative SQL query that fixes the errors. It is important that the query still answer the original question.

  VERY IMPORTANT: Always use hashed_strava_id in the where clause, even if the user asks to remove it. The hashed_strava_id will be embedded strictly only in the user question.
  If it's not present in the user question, reject the request.
  VERY IMPORTANT: Do not attempt to join tables as there is only one table currently (strava_activities)
  VERY IMPORTANT:- Use ONLY the PostgreSQL available appropriate datatypes (i.e {specific_data_types}) while casting the column in the SQL.
  IMPORTANT:- In "FROM" and "JOIN" blocks always refer the table_name as schema.table_name.
  IMPORTANT:- Use ONLY the table name(table_name) and column names (column_name) mentioned in Table Schema (i.e {tables_schema}). DO NOT USE any other column names outside of this.
  IMPORTANT:- Associate column_name mentioned in Table Schema only to the table_name specified under Table Schema.
  NOTE:- Use SQL 'AS' statement to assign a new name temporarily to a table column or even a table wherever needed.

  <Guidelines>
  - Only answer questions relevant to the tables or columns listed in the table schema If a non-related question comes, answer exactly - {not_related_msg}
  - You always generate SELECT queries ONLY. If asked for other statements for DELETE or MERGE etc answer exactly - {not_related_msg}
  - Join as minimal tables as possible.
  - When joining tables ensure all join columns are the same data_type.
  - Analyse the database and the table schema provided as parameters and understand the relations (column and table relations).
  - Don't include any comments in code.
  - Remove ```sql and ``` from the output and generate the SQL in single line.
  - Tables should be refered to using a fully qualified name including owner and table name.
  - Use table_alias.column_name when referring to columns. Example:- dept_id=hr.dept_id
  - Capitalize the table names on SQL "where" condition.
  - Use the columns from the "SELECT" statement while framing "GROUP BY" block.
  - Always refer the column-name with rightly mapped table-name as seen in the table schema.
  - Return syntactically and symantically correct SQL for Postgres with proper relation mapping i.e owner, table and column relation.
  - Refer to the examples provided i.e. {similar_sql}
  </Guidelines>

  <Original SQL>
  {sql}
  </Original SQL>

  <Original Question>
  {user_question}
  </Original Question>

  <Error Message>
  {error_msg}
  </Error Message>


# Placeholders - {user_question} and {sql_result}
nl_reponse: |
  You are a Data Assistant that helps to answer users' questions on their data within their databases.
  
  The user has provided the following question in natural language: 
  {user_question}

  The system has returned the following result after running the SQL query: 
  {sql_result}

  Provide a natural sounding response to the user question using only the data provided to you in markdown format.

  <Usecase context>
  {usecase_context}
  </Usecase context>

  Please state any assumptions you made in your response.


# Placeholders - {formatted_history} and {user_question}
rewrite_prompt: |
  You are an expert in rewriting questions to be more specific and concise.

  Below is the previous session history:
  {formatted_history}

  Question to rewrite:
  {user_question}


summary_prompt: |
  You are building a summary for a dashboard. You are given a list of outputs from a data processing pipeline.
  You need to summarize the data in a way that is easy to understand and can be used to make decisions.

  The data is as follows:

  {unstructured_output}


visualization_type_prompt: |
  You are expert in generating visualizations.

  <Best Practices>
  Some commonly used charts and when do use them:-
    - Table is best for Showing data in a tabular format.
    - Bullet Chart is best for Showing individual values across categories.
    - Bar Chart is best for Comparing individual values across categories, especially with many categories or long labels.
    - Column Chart is best for Comparing individual values across categories, best for smaller datasets.
    - Line Chart is best for Showing trends over time or continuous data sets with many data points.
    - Area Chart is best for Emphasizing cumulative totals over time, or the magnitude of change across multiple categories.
    - Pie Chart is best for Show proportions of a whole, but only for a few categories (ideally less than 6).
    - Scatter Plot is best for Investigating relationships or correlations between two variables.
    - Bubble Chart is best for Comparing and showing relationships between three variables.
    - Histogram is best for Displaying the distribution and frequency of continuous data.
    - Map Chart is best for Visualizing data with a geographic dimension (countries, states, regions, etc.).
    - Gantt Chart	is best for Managing projects, visualizing timelines, and task dependencies.
    - Heatmap is best for	Showing the density of data points across two dimensions, highlighting areas of concentration.
  </Best Practices>

  <Guidelines>
  - Do not add any explanation to the response
  - Do not enclose the response with js or javascript or ```
  - If the result contains only a single value or row, return an empty string
  - Otherwise, return only the single most appropriate chart type for the data
  </Guidelines>

  Below is the Question and corresponding SQL Generated, suggest the most suitable chart type
    Question : {user_question}
    Corresponding SQL : {sql_query}

  {format_instructions}


visualization_code_prompt: |
  You are an expert in generating visualizations using Plotly.js library.
                
  Guidelines:
  - Do not add any explanation to the response.
  - Do not enclose the response with any code block markers.
  - Generate pure JavaScript code that can run in browser.

  You are asked to generate a visualization for the following question:
  {user_question}

  The SQL generated for the question is:
  {sql_query}

  The results of the sql which should be used to generate the visualization are in json format as follows:
  {sql_results}

  Needed chart type is: {chart_type}

  Guidelines:
  - Generate JavaScript code using Plotly.js library
  - The code should assume Plotly.js is already loaded: <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  - The code should create and render the chart into a div with id="chart"
  - Use transparent background for the chart
  - Include proper data transformation from the SQL results
  - Add appropriate titles, labels, and legends
  - Use a professional color scheme and plot the chart in #EA503F unless otherwise specified
  - Include hover information
  - Make the chart responsive
  - Include basic interactivity (zoom, pan, etc.)
  - Include the whole HTML code in the response.
